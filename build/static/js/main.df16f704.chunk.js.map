{"version":3,"sources":["api/base.js","features/charts/chartsSlice.js","api/chartsApi.js","components/graphSettings/graphSettings.jsx","components/mainGraph/graphRow.jsx","utils/colorMixer.js","components/mainGraph/studentsGraph.jsx","components/mainGraph/tasksGraph.jsx","components/mainGraph/mainGraph.jsx","App.js","store.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","fetchCartsData","createAsyncThunk","amount","a","params","API","get","response","data","chartSlice","createSlice","name","initialState","code","status","filters","type","min","max","sort_by","rawData","reducers","setCode","state","action","payload","setData","setFilters","extraReducers","builder","addCase","pending","fulfilled","actions","selectFilters","charts","selectRawGraphData","Option","Select","GraphSettings","dispatch","useDispatch","className","Item","value","style","width","onChange","label","marginRight","e","target","GraphRow","color","weight","colorOne","colorTwo","d2h","d","toString","h2d","h","parseInt","i","v1","substr","v2","val","Math","floor","length","mixTwoColors","persent","description","backgroundColor","StudentsGraph","preparedData","questions","flatMap","student","answers","filter","elem","question","Number","questionId","map","el","total","Set","size","result","first_name","last_name","answer","right","isRight","sort","b","prepareData","display","padding","TasksGraph","graphData","forEach","Object","keys","MainGraph","Content","Layout","App","useSelector","useEffect","mockData","store","configureStore","reducer","chartsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df16f704.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// const BASE_URL = 'https://europe-west3-kedrbots-5fee0.cloudfunctions.net/';\r\nconst TEMP_BASE_URL =\r\n  'https://api.allorigins.win/raw?url=https://europe-west3-kedrbots-5fee0.cloudfunctions.net/'\r\n\r\nexport default axios.create({\r\n  baseURL: TEMP_BASE_URL,\r\n})\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { getChartsData } from '../../api/chartsApi'\r\n\r\nconst initialState = {\r\n  code: '',\r\n  status: 'idle',\r\n  filters: {\r\n    type: 'students', // students or tasks\r\n    min: 1,\r\n    max: 10,\r\n    sort_by: 'tasks', // tasks or complexity\r\n  },\r\n  rawData: [],\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(fetchCartsData(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const fetchCartsData = createAsyncThunk(\r\n  'charts/fetchData',\r\n  async (amount) => {\r\n    const response = await getChartsData(amount)\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const chartSlice = createSlice({\r\n  name: 'charts',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    setCode: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.code = action.payload\r\n    },\r\n    setData: (state, action) => {\r\n      state.rawData = action.payload\r\n    },\r\n    setFilters: (state, action) => {\r\n      state.filters = action.payload\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCartsData.pending, (state) => {\r\n        state.status = 'loading'\r\n      })\r\n      .addCase(fetchCartsData.fulfilled, (state, action) => {\r\n        state.status = 'idle'\r\n        state.rawData = action.payload\r\n      })\r\n  },\r\n})\r\n\r\nexport const { setCode, setFilters, setData } = chartSlice.actions\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.charts.value)`\r\nexport const selectCode = (state) => state.charts.code\r\nexport const selectFilters = (state) => state.charts.filters\r\nexport const selectRawGraphData = (state) => state.charts.rawData\r\n\r\nexport default chartSlice.reducer\r\n","import API from './base'\r\n\r\nexport const getChartsData = (params) => API.get(`rusSeptExportAnswers`, params)\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Select, Form, Input } from 'antd'\r\nimport { setFilters } from '../../features/charts/chartsSlice'\r\nimport './graphSettings.scss'\r\n\r\nconst { Option } = Select\r\n\r\nexport const GraphSettings = ({ filters }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className=\"graph-settings\">\r\n      <Form.Item>\r\n        <Select\r\n          value={filters.type}\r\n          style={{ width: 320 }}\r\n          onChange={(type) => dispatch(setFilters({ ...filters, type }))}\r\n        >\r\n          <Option value=\"students\">Ученики: % правильных ответов</Option>\r\n          <Option value=\"tasks\">Задания: % правильных ответов</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item label=\"Диапазон заданий\">\r\n        <Input\r\n          style={{ width: 70, marginRight: 20 }}\r\n          onChange={(e) =>\r\n            dispatch(setFilters({ ...filters, min: e.target.value }))\r\n          }\r\n          type=\"number\"\r\n          value={filters.min}\r\n        />\r\n        <Input\r\n          style={{ width: 70 }}\r\n          type=\"number\"\r\n          value={filters.max}\r\n          onChange={(e) =>\r\n            dispatch(setFilters({ ...filters, max: e.target.value }))\r\n          }\r\n        />\r\n      </Form.Item>\r\n      {filters.type === 'tasks' && (\r\n        <Form.Item>\r\n          <Select\r\n            value={filters.sort_by}\r\n            style={{ width: 220 }}\r\n            onChange={(sort_by) =>\r\n              dispatch(setFilters({ ...filters, sort_by }))\r\n            }\r\n          >\r\n            <Option value=\"tasks\">Сортировка по заданиям</Option>\r\n            <Option value=\"complexity\">Сортировка по сложности</Option>\r\n          </Select>\r\n        </Form.Item>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { mixTwoColors } from '../../utils/colorMixer'\r\nimport './graphRow.scss'\r\n\r\nexport const GraphRow = ({ data }) => {\r\n  const color = mixTwoColors(data.persent)\r\n  return (\r\n    <div className=\"graph-row\">\r\n      <div className=\"graph-row__name\">{data.name}</div>\r\n      <div className=\"graph-row__stats\" style={{ color }}>\r\n        {data.description}\r\n      </div>\r\n      <div className=\"graph-row__bar-container\">\r\n        <div\r\n          className=\"graph-row__bar\"\r\n          style={{\r\n            backgroundColor: color,\r\n            width: `${data.persent}%`,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export const mixTwoColors = (\r\n  weight = 50,\r\n  colorOne = '00B65E',\r\n  colorTwo = 'FB4242'\r\n) => {\r\n  function d2h(d) {\r\n    return d.toString(16)\r\n  } // convert a decimal value to hex\r\n  function h2d(h) {\r\n    return parseInt(h, 16)\r\n  } // convert a hex value to decimal\r\n\r\n  weight = typeof weight !== 'undefined' ? weight : 50 // set the weight to 50%, if that argument is omitted\r\n\r\n  var color = '#'\r\n\r\n  for (var i = 0; i <= 5; i += 2) {\r\n    // loop through each of the 3 hex pairs—red, green, and blue\r\n    var v1 = h2d(colorOne.substr(i, 2)), // extract the current pairs\r\n      v2 = h2d(colorTwo.substr(i, 2)),\r\n      // combine the current pairs from each source color, according to the specified weight\r\n      val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)))\r\n\r\n    while (val.length < 2) {\r\n      val = '0' + val\r\n    } // prepend a '0' if val results in a single digit\r\n\r\n    color += val // concatenate val to our new color string\r\n  }\r\n\r\n  return color // PROFIT!\r\n}\r\n","import React from 'react'\r\nimport { GraphRow } from './graphRow'\r\n\r\nfunction prepareData(data, filters) {\r\n  const questions = data\r\n    .flatMap((student) => student.answers)\r\n    .filter((elem) => {\r\n      const question = Number.parseInt(elem.questionId)\r\n      return question <= filters.max && question >= filters.min\r\n    })\r\n    .map((el) => el.questionId)\r\n  const total = new Set(questions).size\r\n  let preparedData = data.map((student) => {\r\n    const result = {\r\n      name: `${student.first_name} ${student.last_name || ''}`,\r\n      code: student.code,\r\n    }\r\n    const answers = student.answers.filter((answer) => {\r\n      const question = Number.parseInt(answer.questionId)\r\n      return question <= filters.max && question >= filters.min\r\n    })\r\n    result.total = total\r\n    result.right = answers.filter((a) => a.answer?.isRight).length\r\n    result.persent = result.right\r\n      ? Math.floor((result.right * 100) / result.total)\r\n      : 0\r\n    result.description = `${result.right}/${result.total}`\r\n    return result\r\n  })\r\n  preparedData.sort((a, b) => b.persent - a.persent)\r\n  return preparedData\r\n}\r\n\r\nexport const StudentsGraph = ({ data, filters }) => {\r\n  const preparedData = prepareData(data, filters)\r\n  return (\r\n    <div style={{ display: 'table', padding: '0 24px' }}>\r\n      {preparedData.map((data) => (\r\n        <GraphRow key={data.code || data.name} data={data} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { GraphRow } from './graphRow'\r\n\r\nfunction prepareData(data, filters) {\r\n  let graphData = {}\r\n  data\r\n    .flatMap((student) => student.answers)\r\n    .filter((elem) => {\r\n      const question = Number.parseInt(elem.questionId)\r\n      return question <= filters.max && question >= filters.min\r\n    })\r\n    .forEach((elem) => {\r\n      const question = graphData[elem.questionId]\r\n      if (question) {\r\n        question.total += 1\r\n        question.right += elem.answer.isRight ? 1 : 0\r\n      } else {\r\n        graphData[elem.questionId] = {\r\n          total: 1,\r\n          right: elem.answer.isRight ? 1 : 0,\r\n        }\r\n      }\r\n    })\r\n  const preparedData = Object.keys(graphData).map((question) => {\r\n    const d = graphData[question]\r\n    return {\r\n      name: question,\r\n      total: d.total,\r\n      right: d.right,\r\n      description: `${d.right ? Math.floor((d.right * 100) / d.total) : 0}%`,\r\n      persent: d.right ? Math.floor((d.right * 100) / d.total) : 0,\r\n    }\r\n  })\r\n  if (filters.sort_by === 'complexity') {\r\n    preparedData.sort(\r\n      (a, b) => Number.parseInt(a.persent) - Number.parseInt(b.persent)\r\n    )\r\n  } else {\r\n    preparedData.sort((a, b) => a.name - b.name)\r\n  }\r\n  return preparedData\r\n}\r\n\r\nexport const TasksGraph = ({ data, filters }) => {\r\n  const preparedData = prepareData(data, filters)\r\n  return (\r\n    <div style={{ display: 'table', padding: '0 24px' }}>\r\n      {preparedData.map((data) => (\r\n        <GraphRow key={data.name} data={data} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { StudentsGraph } from './studentsGraph'\r\nimport { TasksGraph } from './tasksGraph'\r\n\r\nexport const MainGraph = ({ data, filters }) => {\r\n  if (filters?.type === 'students') {\r\n    return <StudentsGraph data={data} filters={filters} />\r\n  } else if (filters?.type === 'tasks') {\r\n    return <TasksGraph data={data} filters={filters} />\r\n  } else {\r\n    return <div>Sorry, no info</div>\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Layout, Divider } from 'antd'\nimport {\n  selectFilters,\n  selectRawGraphData,\n  setData,\n  // fetchCartsData,\n} from './features/charts/chartsSlice'\nimport { GraphSettings, MainGraph } from './components'\nimport './App.scss'\nimport mockData from './data.json'\n\nconst { Content } = Layout\n\nfunction App() {\n  const dispatch = useDispatch()\n  const filters = useSelector(selectFilters)\n  const rawData = useSelector(selectRawGraphData)\n  // const [data] = useState([\n  //   { genre: 'Sports', sold: 275 },\n  //   { genre: 'Strategy', sold: 115 },\n  //   { genre: 'Action', sold: 120 },\n  //   { genre: 'Shooter', sold: 350 },\n  //   { genre: 'Other', sold: 150 },\n  // ])\n\n  useEffect(() => {\n    dispatch(setData(mockData))\n    // dispatch(fetchCartsData())\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <Content>\n        <GraphSettings filters={filters} />\n        <Divider />\n        <MainGraph filters={filters} data={rawData} />\n        {/* <header className=\"App-header\">\n          <div className=\"charts\">\n            <div id=\"chart\"></div>\n          </div>\n          <BasicChart data={data} />\n          <p>Sample chart</p>\n        </header> */}\n      </Content>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport chartsReducer from './features/charts/chartsSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    charts: chartsReducer,\r\n  },\r\n})\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { store } from './store'\nimport { Provider } from 'react-redux'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}