{"version":3,"sources":["api/base.js","features/charts/chartsSlice.js","api/chartsApi.js","components/graphSettings/graphSettings.jsx","components/mainGraph/graphRow.jsx","utils/colorMixer.js","components/mainGraph/studentsGraph.jsx","components/mainGraph/tasksGraph.jsx","components/mainGraph/mainGraph.jsx","App.js","store.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","initialState","code","status","filters","homework","type","rawData","homeworks","taskMetadata","fetchChartsData","createAsyncThunk","amount","a","params","API","get","response","data","chartSlice","createSlice","name","reducers","setCode","state","action","payload","setData","setFilters","extraReducers","builder","addCase","pending","fulfilled","actions","selectFilters","charts","selectRawGraphData","selectHomeworks","selectTaskMetadata","Option","Select","GraphSettings","dispatch","useDispatch","className","Item","value","style","width","marginRight","onChange","map","h","homeworkNumber","GraphRow","index","color","weight","colorOne","colorTwo","d2h","d","toString","h2d","parseInt","i","v1","substr","v2","val","Math","floor","length","mixTwoColors","persent","backgroundColor","description","StudentsGraph","preparedData","find","questions","flatMap","student","answers","filter","elem","question","Number","questionId","questionIdList","some","q","el","total","Set","size","result","first_name","last_name","answer","right","isRight","sort","b","prepareData","display","padding","TasksGraph","graphData","forEach","Object","keys","toUpperCase","row","MainGraph","Content","Layout","App","useSelector","useEffect","store","configureStore","reducer","chartsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34533849.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// const BASE_URL = 'https://europe-west3-kedrbots-5fee0.cloudfunctions.net/';\r\nconst TEMP_BASE_URL =\r\n  'https://api.allorigins.win/raw?url=https://europe-west3-kedrbots-5fee0.cloudfunctions.net/'\r\n\r\nexport default axios.create({\r\n  baseURL: TEMP_BASE_URL,\r\n})\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { getChartsData } from '../../api/chartsApi'\r\nimport rawData from '../../data/data.json'\r\nimport homeworkData from '../../data/tasks_to_homeworks.json'\r\nimport taskMetadata from '../../data/task_to_level_flat.json'\r\n\r\nconst initialState = {\r\n  code: '',\r\n  status: 'idle',\r\n  filters: {\r\n    homework: 'all',\r\n    type: 'students', // students or tasks\r\n  },\r\n  rawData,\r\n  homeworks: homeworkData,\r\n  taskMetadata: taskMetadata,\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(fetchCartsData(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const fetchChartsData = createAsyncThunk(\r\n  'charts/fetchData',\r\n  async (amount) => {\r\n    const response = await getChartsData(amount)\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const chartSlice = createSlice({\r\n  name: 'charts',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    setCode: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.code = action.payload\r\n    },\r\n    setData: (state, action) => {\r\n      state.rawData = action.payload\r\n    },\r\n    setFilters: (state, action) => {\r\n      state.filters = action.payload\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchChartsData.pending, (state) => {\r\n        state.status = 'loading'\r\n      })\r\n      .addCase(fetchChartsData.fulfilled, (state, action) => {\r\n        state.status = 'idle'\r\n        state.rawData = action.payload\r\n      })\r\n  },\r\n})\r\n\r\nexport const { setCode, setFilters, setData } = chartSlice.actions\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.charts.value)`\r\nexport const selectCode = (state) => state.charts.code\r\nexport const selectFilters = (state) => state.charts.filters\r\nexport const selectRawGraphData = (state) => state.charts.rawData\r\nexport const selectHomeworks = (state) => state.charts.homeworks\r\nexport const selectTaskMetadata = (state) => state.charts.taskMetadata\r\n\r\nexport default chartSlice.reducer\r\n","import API from './base'\r\n\r\nexport const getChartsData = (params) => API.get(`rusSeptExportAnswers`, params)\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Select, Form } from 'antd'\r\nimport { setFilters } from '../../features/charts/chartsSlice'\r\nimport './graphSettings.scss'\r\n\r\nconst { Option } = Select\r\n\r\nexport const GraphSettings = ({ filters, homeworks }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className=\"graph-settings\">\r\n      <Form.Item>\r\n        <Select\r\n          key=\"homework\"\r\n          value={filters.homework}\r\n          style={{ width: 160, marginRight: 20 }}\r\n          onChange={(homework) =>\r\n            dispatch(setFilters({ ...filters, homework }))\r\n          }\r\n        >\r\n          {homeworks.map((h) => (\r\n            <Option\r\n              key={h.homeworkNumber}\r\n              value={h.homeworkNumber}\r\n            >{`Домашка ${h.homeworkNumber}`}</Option>\r\n          ))}\r\n          <Option value=\"all\">Все задания</Option>\r\n        </Select>\r\n        <Select\r\n          key=\"type\"\r\n          value={filters.type}\r\n          style={{ width: 160 }}\r\n          onChange={(type) => dispatch(setFilters({ ...filters, type }))}\r\n        >\r\n          <Option value=\"students\">Ученики</Option>\r\n          <Option value=\"tasks\">Задания</Option>\r\n        </Select>\r\n      </Form.Item>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { mixTwoColors } from '../../utils/colorMixer'\r\nimport './graphRow.scss'\r\n\r\nexport const GraphRow = ({ data, index }) => {\r\n  const color = mixTwoColors(data.persent)\r\n  return (\r\n    <div className=\"graph-row\">\r\n      <div className=\"graph-row__bar-container\">\r\n        <div\r\n          className=\"graph-row__persent\"\r\n          style={{ color: data.persent <= 5 ? 'black' : 'white' }}\r\n        >{`${data.persent}%`}</div>\r\n        <div\r\n          className=\"graph-row__bar\"\r\n          style={{\r\n            backgroundColor: color,\r\n            width: `${data.persent}%`,\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"graph-row__index\">{`${index || data.description}.`}</div>\r\n      <div className=\"graph-row__name\">{data.name}</div>\r\n    </div>\r\n  )\r\n}\r\n","export const mixTwoColors = (\r\n  weight = 50,\r\n  colorOne = '05AB47',\r\n  colorTwo = '2FA8DD'\r\n) => {\r\n  function d2h(d) {\r\n    return d.toString(16)\r\n  } // convert a decimal value to hex\r\n  function h2d(h) {\r\n    return parseInt(h, 16)\r\n  } // convert a hex value to decimal\r\n\r\n  weight = typeof weight !== 'undefined' ? weight : 50 // set the weight to 50%, if that argument is omitted\r\n\r\n  var color = '#'\r\n\r\n  for (var i = 0; i <= 5; i += 2) {\r\n    // loop through each of the 3 hex pairs—red, green, and blue\r\n    var v1 = h2d(colorOne.substr(i, 2)), // extract the current pairs\r\n      v2 = h2d(colorTwo.substr(i, 2)),\r\n      // combine the current pairs from each source color, according to the specified weight\r\n      val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)))\r\n\r\n    while (val.length < 2) {\r\n      val = '0' + val\r\n    } // prepend a '0' if val results in a single digit\r\n\r\n    color += val // concatenate val to our new color string\r\n  }\r\n\r\n  return color // PROFIT!\r\n}\r\n","import React from 'react'\r\nimport { GraphRow } from './graphRow'\r\n\r\nfunction prepareData(data, filters, homeworks) {\r\n  const homework = homeworks.find((h) => h.homeworkNumber === filters.homework)\r\n  const questions = data\r\n    .flatMap((student) => student.answers)\r\n    .filter((elem) => {\r\n      const question = Number.parseInt(elem.questionId)\r\n      return !homework || homework.questionIdList.some((q) => q === question)\r\n    })\r\n    .map((el) => el.questionId)\r\n  const total = new Set(questions).size\r\n  let preparedData = data.map((student) => {\r\n    const result = {\r\n      name: `${student.first_name} ${student.last_name || ''}`,\r\n      code: student.code,\r\n    }\r\n    const answers = student.answers.filter((answer) => {\r\n      const question = Number.parseInt(answer.questionId)\r\n      return !homework || homework.questionIdList.some((q) => q === question)\r\n    })\r\n    result.total = total\r\n    result.right = answers.filter((a) => a.answer?.isRight).length\r\n    result.persent = result.right\r\n      ? Math.floor((result.right * 100) / result.total)\r\n      : 0\r\n    result.description = `${result.persent}%`\r\n    return result\r\n  })\r\n  preparedData.sort((a, b) => b.persent - a.persent)\r\n  return preparedData\r\n}\r\n\r\nexport const StudentsGraph = ({ data, filters, homeworks }) => {\r\n  const preparedData = prepareData(data, filters, homeworks)\r\n  return (\r\n    <div style={{ display: 'table', padding: '0 24px' }}>\r\n      {preparedData.map((data, index) => (\r\n        <GraphRow key={data.code || data.name} index={index + 1} data={data} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { GraphRow } from './graphRow'\r\n\r\nfunction prepareData(data, filters, homeworks, taskMetadata) {\r\n  const homework = homeworks.find((h) => h.homeworkNumber === filters.homework)\r\n  let graphData = {}\r\n  data\r\n    .flatMap((student) => student.answers)\r\n    .filter((elem) => {\r\n      const question = Number.parseInt(elem.questionId)\r\n      return !homework || homework.questionIdList.some((q) => q === question)\r\n    })\r\n    .forEach((elem) => {\r\n      const question = graphData[elem.questionId]\r\n      if (question) {\r\n        question.total += 1\r\n        question.right += elem.answer.isRight ? 1 : 0\r\n      } else {\r\n        graphData[elem.questionId] = {\r\n          total: 1,\r\n          right: elem.answer.isRight ? 1 : 0,\r\n        }\r\n      }\r\n    })\r\n  let preparedData = Object.keys(graphData).map((question) => {\r\n    const d = graphData[question]\r\n    const name = taskMetadata[question] || question\r\n    return {\r\n      name: name.toUpperCase(),\r\n      total: d.total,\r\n      right: d.right,\r\n      description: question,\r\n      persent: d.right ? Math.floor((d.right * 100) / d.total) : 0,\r\n    }\r\n  })\r\n  // add relative number in homework\r\n  preparedData.sort((a, b) => a.name - b.name)\r\n  preparedData = preparedData.map((row, index) => ({\r\n    ...row,\r\n    description: index + 1,\r\n  }))\r\n  preparedData.sort(\r\n    (a, b) => Number.parseInt(a.persent) - Number.parseInt(b.persent)\r\n  )\r\n\r\n  return preparedData\r\n}\r\n\r\nexport const TasksGraph = ({ data, filters, homeworks, taskMetadata }) => {\r\n  const preparedData = prepareData(data, filters, homeworks, taskMetadata)\r\n  return (\r\n    <div style={{ display: 'table', padding: '0 24px' }}>\r\n      {preparedData.map((data) => (\r\n        <GraphRow key={data.description} data={data} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { StudentsGraph } from './studentsGraph'\r\nimport { TasksGraph } from './tasksGraph'\r\n\r\nexport const MainGraph = ({ data, filters, homeworks, taskMetadata }) => {\r\n  if (filters?.type === 'students') {\r\n    return (\r\n      <StudentsGraph\r\n        data={data}\r\n        filters={filters}\r\n        homeworks={homeworks}\r\n        taskMetadata={taskMetadata}\r\n      />\r\n    )\r\n  } else if (filters?.type === 'tasks') {\r\n    return (\r\n      <TasksGraph\r\n        data={data}\r\n        filters={filters}\r\n        homeworks={homeworks}\r\n        taskMetadata={taskMetadata}\r\n      />\r\n    )\r\n  } else {\r\n    return <div>Sorry, no info</div>\r\n  }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Layout, Divider } from 'antd'\r\nimport {\r\n  selectFilters,\r\n  selectRawGraphData,\r\n  selectHomeworks,\r\n  selectTaskMetadata,\r\n  // setData,\r\n  fetchChartsData,\r\n} from './features/charts/chartsSlice'\r\nimport { GraphSettings, MainGraph } from './components'\r\nimport './App.scss'\r\n// import mockData from './data/data.json'\r\n\r\nconst { Content } = Layout\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const filters = useSelector(selectFilters)\r\n  const rawData = useSelector(selectRawGraphData)\r\n  const homeworks = useSelector(selectHomeworks)\r\n  const taskMetadata = useSelector(selectTaskMetadata)\r\n  // const [data] = useState([\r\n  //   { genre: 'Sports', sold: 275 },\r\n  //   { genre: 'Strategy', sold: 115 },\r\n  //   { genre: 'Action', sold: 120 },\r\n  //   { genre: 'Shooter', sold: 350 },\r\n  //   { genre: 'Other', sold: 150 },\r\n  // ])\r\n\r\n  useEffect(() => {\r\n    // dispatch(setData(mockData))\r\n    // dispatch(fetchChartsData())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Content>\r\n        <GraphSettings filters={filters} homeworks={homeworks} />\r\n        <Divider />\r\n        <MainGraph\r\n          filters={filters}\r\n          data={rawData}\r\n          homeworks={homeworks}\r\n          taskMetadata={taskMetadata}\r\n        />\r\n        {/* <header className=\"App-header\">\r\n          <div className=\"charts\">\r\n            <div id=\"chart\"></div>\r\n          </div>\r\n          <BasicChart data={data} />\r\n          <p>Sample chart</p>\r\n        </header> */}\r\n      </Content>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport chartsReducer from './features/charts/chartsSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    charts: chartsReducer,\r\n  },\r\n})\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport App from './App'\r\nimport { store } from './store'\r\nimport { Provider } from 'react-redux'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}